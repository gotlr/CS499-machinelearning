as.vector(v.gradient)
v.vec = v.vec-step.size * (v.gradient / n.observations)
W.gradient.i=0.5*t(Xi.train.a%*%diag(sigmoid_return(v.vec)))%*%(yi.hat-y.train[1])%*%X.scaled.train[1,]
v.vec = as.vector(v.vec)
W.gradient.i=0.5*t(Xi.train.a%*%diag(sigmoid_return(v.vec)))%*%(yi.hat-y.train[1])%*%X.scaled.train[1,]
W.gradient = w.gradient + t(w.gradient.i)
W.mat = W.mat - step.size * (W.gradient / n.observations)
W.mat
if ((y.vec == 0)|| (y.vec == 1))
is.binary = 1
else
is.binary=1
if ((y.vec == 0)|| (y.vec == 1)){
is.binary = 1
else
is.binary=1
}
?if
?if()
help(if)
else
if ((y.vec == 0)|| (y.vec == 1))
is.binary = 1
else
is.binary=1
if ((y.vec == 0)|| (y.vec == 1))
is.binary = 1 else
is.binary=1
if ((y.vec == 0)|| (y.vec == 1))
is.binary = 1 else
is.binary=1
if ((y.vec == 0)|| (y.vec == 1))
is.binary = 1
else
is.binary=1
is.binary
if ((y.vec == 0)|| (y.vec == 1))
is.binary = 1
is.binary = 0
if ((y.vec == 0)|| (y.vec == 1))
is.binary = 1 else
is.binary = 0
dim(W.mat)
v.vec
X.scaled.mat%*%W.mat
X.scaled.mat%*%W.mat%*%v.vec
X.scaled.mat%*%W.mat%*%t(v.vec)
X.scaled.mat%*%W.mat%*%t(t(v.vec))
pred.vec=sigmoid(X.scaled.mat%*%W.mat)%*%v.vec
pred.vec
dim(pred.vec)
pre.vec = sigmoid(pre.vec)
pred.vec = sigmoid(pred.vec)
pre.vec
pred.vec
pred.vec = sigmoid(pred.vec)
pre.vec
pred.vec
pred.mat
pred.mat[,1]=pred.vec
pred.mat
X.mat
for(iteration in max.iterations){
for (index in dim(X.scaled.train)[index]){
v.vec = as.vector(v.vec)
Xi.train.vec=X.scaled.train[index,]
Xi.train.a=Xi.train.vec%*%W.mat
Xi.train.z=sigmoid(Xi.train.a)
Xi.train.b=Xi.train.z%*%v.vec
if (is.binary)
yi.hat = sigmoid(Xi.train.b) else
yi.hat=Xi.train.b
v.gradient.i=0.5*(yi.hat-y.train[index])%*%Xi.train.z
W.gradient.i=0.5*t(Xi.train.a%*%diag(sigmoid_return(v.vec)))%*%(yi.hat-y.train[index])%*%X.scaled.train[index,]
v.gradient = v.gradient + v.gradient.i
W.gradient = w.gradient + t(w.gradient.i)
}
v.vec = v.vec-step.size * (v.gradient / n.observations)
W.mat = W.mat - step.size * (W.gradient / n.observations)
pred.vec=sigmoid(X.scaled.mat%*%W.mat)%*%v.vec
if(is.binary)
pred.vec = sigmoid(pred.vec)
pred.mat[,iteration]= pred.vec
}
library(NeuralNetwork1)
X.mat
y.vec
NNetIterations(X.mat,y.vec,3L,0.5,3,c(1,2))
library(NeuralNetwork1)
NNetIterations(X.mat,y.vec,3L,0.5,3,c(1,2))
NNetIterations(X.mat,y.vec,3L,0.5,3L,c(1,2))
X.mat
NNetIterations(X.mat,y.vec,3L,0.5,3L,c(TRUE,TRUE,TRUE,FALSE,FALSE))
NNetIterations(X.mat,y.vec,3L,0.5,3L,c(TRUE,TRUE,TRUE,FALSE))
library(NeuralNetwork1)
NNetIterations(X.mat,y.vec,3L,0.5,3L,c(TRUE,TRUE,TRUE,FALSE))
X.scaled.mat%*%W.mat
v.vec
sigmoid(X.scaled.mat%*%W.mat)%*%v.vec
v.vec = v.vec-step.size * (v.gradient / n.observations)
v.vec
library(NeuralNetwork1)
NNetIterations(X.mat,y.vec,3L,0.5,3L,c(TRUE,TRUE,TRUE,FALSE))
dim(pred.mat)
pred.mat
v.vec
library(NeuralNetwork1)
pred.mat=(NNetIterations(X.mat,y.vec,3L,0.5,3L,c(TRUE,TRUE,TRUE,FALSE)))
pred.mat
NNetIterations(X.mat,y.vec,3L,0.5,3L,c(TRUE,TRUE,TRUE,FALSE))
for(iteration in max.iterations){
for (index in dim(X.scaled.train)[1]){
v.vec = as.vector(v.vec)
Xi.train.vec=X.scaled.train[index,]
Xi.train.a=Xi.train.vec%*%W.mat
Xi.train.z=sigmoid(Xi.train.a)
Xi.train.b=Xi.train.z%*%v.vec
if (is.binary)
yi.hat = sigmoid(Xi.train.b) else
yi.hat=Xi.train.b
v.gradient.i=0.5*(yi.hat-y.train[index])%*%Xi.train.z
W.gradient.i=0.5*t(Xi.train.a%*%diag(sigmoid_return(v.vec)))%*%(yi.hat-y.train[index])%*%X.scaled.train[index,]
v.gradient = v.gradient + v.gradient.i
W.gradient = w.gradient + t(w.gradient.i)
}
v.vec = v.vec-step.size * (v.gradient / n.observations)
W.mat = W.mat - step.size * (W.gradient / n.observations)
pred.vec=sigmoid(X.scaled.mat%*%W.mat)%*%as.vector(v.vec)
if(is.binary)
pred.vec = sigmoid(pred.vec)
pred.mat[,iteration]= pred.vec
}
index
iteration
pred.vec
pred.mat
for (index in dim(X.scaled.train)[1]){
v.vec = as.vector(v.vec)
Xi.train.vec=X.scaled.train[index,]
Xi.train.a=Xi.train.vec%*%W.mat
Xi.train.z=sigmoid(Xi.train.a)
Xi.train.b=Xi.train.z%*%v.vec
if (is.binary)
yi.hat = sigmoid(Xi.train.b) else
yi.hat=Xi.train.b
v.gradient.i=0.5*(yi.hat-y.train[index])%*%Xi.train.z
W.gradient.i=0.5*t(Xi.train.a%*%diag(sigmoid_return(v.vec)))%*%(yi.hat-y.train[index])%*%X.scaled.train[index,]
v.gradient = v.gradient + v.gradient.i
W.gradient = w.gradient + t(w.gradient.i)
}
W.gradient
v.vec = v.vec-step.size * (v.gradient / n.observations)
W.mat = W.mat - step.size * (W.gradient / n.observations)
pred.vec=sigmoid(X.scaled.mat%*%W.mat)%*%as.vector(v.vec)
pred.vec
if(is.binary)
pred.vec = sigmoid(pred.vec)
pred.mat[,iteration]= pred.vec
pred.mat[,1]= pred.vec
pred.mat
pred.mat[,2]=pred.vec
pred.mat
pred.mat = matrix(0,n.observations, max.iterations)
W.mat
for(iteration in max.iterations){
# for (index in dim(X.scaled.train)[1]){
#   v.vec = as.vector(v.vec)
#   Xi.train.vec=X.scaled.train[index,]
#   Xi.train.a=Xi.train.vec%*%W.mat
#   Xi.train.z=sigmoid(Xi.train.a)
#   Xi.train.b=Xi.train.z%*%v.vec
#  if (is.binary)
#    yi.hat = sigmoid(Xi.train.b) else
#   yi.hat=Xi.train.b
#   v.gradient.i=0.5*(yi.hat-y.train[index])%*%Xi.train.z
#   W.gradient.i=0.5*t(Xi.train.a%*%diag(sigmoid_return(v.vec)))%*%(yi.hat-y.train[index])%*%X.scaled.train[index,]
#   v.gradient = v.gradient + v.gradient.i
#   W.gradient = w.gradient + t(w.gradient.i)
# }
v.vec = v.vec-step.size * (v.gradient / n.observations)
W.mat = W.mat - step.size * (W.gradient / n.observations)
pred.vec=sigmoid(X.scaled.mat%*%W.mat)%*%as.vector(v.vec)
if(is.binary)
pred.vec = sigmoid(pred.vec)
pred.mat[,iteration]= pred.vec
}
pred.mat
for(i in max.iterations){
# for (index in dim(X.scaled.train)[1]){
#   v.vec = as.vector(v.vec)
#   Xi.train.vec=X.scaled.train[index,]
#   Xi.train.a=Xi.train.vec%*%W.mat
#   Xi.train.z=sigmoid(Xi.train.a)
#   Xi.train.b=Xi.train.z%*%v.vec
#  if (is.binary)
#    yi.hat = sigmoid(Xi.train.b) else
#   yi.hat=Xi.train.b
#   v.gradient.i=0.5*(yi.hat-y.train[index])%*%Xi.train.z
#   W.gradient.i=0.5*t(Xi.train.a%*%diag(sigmoid_return(v.vec)))%*%(yi.hat-y.train[index])%*%X.scaled.train[index,]
#   v.gradient = v.gradient + v.gradient.i
#   W.gradient = w.gradient + t(w.gradient.i)
# }
v.vec = v.vec-step.size * (v.gradient / n.observations)
W.mat = W.mat - step.size * (W.gradient / n.observations)
pred.vec=sigmoid(X.scaled.mat%*%W.mat)%*%as.vector(v.vec)
if(is.binary)
pred.vec = sigmoid(pred.vec)
pred.mat[,iteration]= pred.vec
}
pred.mat
for(i in 3){
v.vec = v.vec-step.size * (v.gradient / n.observations)
W.mat = W.mat - step.size * (W.gradient / n.observations)
pred.vec=sigmoid(X.scaled.mat%*%W.mat)%*%as.vector(v.vec)
if(is.binary)
pred.vec = sigmoid(pred.vec)
pred.mat[,iteration]= pred.vec
}
pre.mat
pred.mat
for(i in 3){
v.vec = v.vec-step.size * (v.gradient / n.observations)
W.mat = W.mat - step.size * (W.gradient / n.observations)
pred.vec=sigmoid(X.scaled.mat%*%W.mat)%*%as.vector(v.vec)
if(is.binary)
pred.vec = sigmoid(pred.vec)
pred.mat[,i]= pred.vec
}
pred.mat
for(i in 3){}
for(i in 3){a=a+1}
a
for(i in 3){a=a+1}
a
for(1 in 3){a=a+1}
for(i in 4){a=a+1}
a
library(NeuralNetwork1)
library(NeuralNetwork1)
NNetIterations(X.mat,y.vec,3L,0.5,3L,c(TRUE,TRUE,TRUE,FALSE))
library(NeuralNetwork1)
NNetIterations(X.mat,y.vec,3L,0.5,3L,c(TRUE,TRUE,TRUE,FALSE))
a=NNetIterations(X.mat,y.vec,3L,0.5,3L,c(TRUE,TRUE,TRUE,FALSE))
a
y.vec
NNetIterations(X.mat,y.vec,3L,0.5,3L,c(TRUE,TRUE,TRUE,FALSE))
list=NNetIterations(X.mat,y.vec,3L,0.5,3L,c(TRUE,TRUE,TRUE,FALSE))
library(NeuralNetwork1)
return.list <- list=NNetIterations(X.mat,y.vec,3L,0.5,3L,c(TRUE,TRUE,TRUE,FALSE))
y.vec
return.list <- list=NNetIterations(X.mat,y.vec,3L,0.5,3L,c(TRUE,TRUE,TRUE,FALSE))
y.vec
run
rbinom(30,2,.5)
rbinom(30,1.5)
rbinom(30,1，。5)
rbinom(30,1，.5)
rbinom(30,1,.9)
rbinom(30,1,.8)
a=rbinom(30,1,.8)
as.logical(a)
data(prostrate,package = "ElemStatLearn")
data(prostate,package = "ElemStatLearn")
X.mat=data(prostate,package = "ElemStatLearn")
X.mat
data(prostrate, package = "ElemStatLearn")
data(ozne, package = "ElemStatLearn")
data(ozone, package = "ElemStatLearn")
y.vec <- ozone[, 1]
X.mat <- as.matrix(ozone[,-1])
X>mat
X.mat
y.vec
is.train=rbinom(length(v.vec),1,.8)
is.train=as.logical(is.train)
is.train
y.vec
length(y.vec)
is.train=as.logical(is.train)
is.train
is.train=rbinom(length(v.vec),1,.8)
is.train
is.train=rbinom(111,1,.8)
is.train
is.train=rbinom(length(y.vec),1,.8)
is.train=as.logical(is.train)
is.train
NNetIterations((X.mat,y.vec,20L,0.5,3L,is.train))
NNetIterations(X.mat,y.vec,20L,0.5,3L,is.train)
dim(X.mat)
dim(is.train)
length(is.train)
length(y.vec)
train.index = which(is.train==TRUE)
train.index
validation.index = which(is.train!=TRUE)
X.mat.min = colMeans(X.mat)
X.temp=t(t(X.mat)-X.mat.min)
X.mat.sd=sqrt(colSums((X.temp)^2)/dim(X.mat)[1])
X.scaled.mat=t(t(X.temp)/X.mat.sd)
X.scaled.train = X.scale.mat[train.index,]
dim(X.scaled.mat)
X.scaled.mat[c(1,2),]
X.scaled.validation = X.scale.mat[validation.index,]
validation.index
X.scale.mat[c(10,11,14),]
X.scale.mat[10,]
X.scale.mat
X.mat.min = colMeans(X.mat)
X.temp=t(t(X.mat)-X.mat.min)
X.mat.sd=sqrt(colSums((X.temp)^2)/dim(X.mat)[1])
X.scaled.mat=t(t(X.temp)/X.mat.sd)
X.scale.mat
data(ozone, package = "ElemStatLearn")
y.vec <- ozone[, 1]
X.mat <- as.matrix(ozone[,-1])
X.mat
is.train
n.observations <- nrow(X.mat)
n.features <- ncol(X.mat)
X.mat.min = colMeans(X.mat)
X.temp=t(t(X.mat)-X.mat.min)
X.mat.sd=sqrt(colSums((X.temp)^2)/dim(X.mat)[1])
X.scaled.mat=t(t(X.temp)/X.mat.sd)
X.scaled.mat
train.index = which(is.train==TRUE)
validation.index = which(is.train!=TRUE)
X.scaled.train = X.scale.mat[train.index,]
y.train = y.vec[train.index]
X.scaled.validation = X.scale.mat[validation.index,]
y.validation = y.vec[validation.index]
X.scaled.mat
X.scaled.mat[10]
X.scaled.mat[10,]
train.index = which(is.train==TRUE)
validation.index = which(is.train!=TRUE)
X.scaled.train = X.scale.mat[train.index,]
library(NeuralNetwork1)
NNetIterations(X.mat,y.vec,20L,0.5,3L,is.train)
X.mat.min = colMeans(X.mat)
X.temp=t(t(X.mat)-X.mat.min)
X.mat.sd=sqrt(colSums((X.temp)^2)/dim(X.mat)[1])
X.scaled.mat=t(t(X.temp)/X.mat.sd)
train.index = which(is.train==TRUE)
validation.index = which(is.train!=TRUE)
X.scaled.train = X.scaled.mat[train.index,]
y.train = y.vec[train.index]
X.scaled.validation = X.scaled.mat[validation.index,]
y.validation = y.vec[validation.index]
pred.mat = matrix(0,n.observations, max.iterations)
W.mat = matrix(rnorm(n.features*n.hidden.units),n.features,n.hidden.units)
v.vec = rnorm(n.hidden.units)
v.gradient=rep(0,n.hidden.units)
w.gradient=matrix(0,n.features,n.hidden.units)
for (index in 1:dim(X.scaled.train)[1]){
v.vec = as.vector(v.vec)
Xi.train.vec=X.scaled.train[index,]
Xi.train.a=Xi.train.vec%*%W.mat
Xi.train.z=sigmoid(Xi.train.a)
Xi.train.b=Xi.train.z%*%v.vec
# if (is.binary)
#yi.hat = sigmoid(Xi.train.b) else
yi.hat=Xi.train.b
v.gradient.i=0.5*(yi.hat-y.train[index])%*%Xi.train.z
W.gradient.i=0.5*t(Xi.train.a%*%diag(sigmoid_return(v.vec)))%*%(yi.hat-y.train[index])%*%X.scaled.train[index,]
v.gradient = v.gradient + v.gradient.i
W.gradient = w.gradient + t(w.gradient.i)
}
index=1
v.vec = as.vector(v.vec)
Xi.train.vec=X.scaled.train[index,]
Xi.train.a=Xi.train.vec%*%W.mat
Xi.train.z=sigmoid(Xi.train.a)
Xi.train.b=Xi.train.z%*%v.vec
yi.hat=Xi.train.b
v.gradient.i=0.5*(yi.hat-y.train[index])%*%Xi.train.z
W.gradient.i=0.5*t(Xi.train.a%*%diag(sigmoid_return(v.vec)))%*%(yi.hat-y.train[index])%*%X.scaled.train[index,]
v.gradient = v.gradient + v.gradient.i
W.gradient.i=
W.gradient.i
W.gradient
w.gradient=matrix(0,n.features,n.hidden.units)
W.gradient
n.observations <- nrow(X.mat)
n.features <- ncol(X.mat)
n.observations
n.features
n.hidden.units
w.gradient=matrix(0,n.features,n.hidden.units)
W.gradient
n.hidden.units
n.features
w.gradient=matrix(0,3,3)
W.gradient
matrix(0,3,3)
W.gradient=matrix(0,3,3)
W.gradient
w.gradient=matrix(0,n.features,n.hidden.units)
w.gradient
W.gradient = w.gradient + t(w.gradient.i)
w.gradient.i
W.gradient.i=0.5*t(Xi.train.a%*%diag(sigmoid_return(v.vec)))%*%(yi.hat-y.train[index])%*%X.scaled.train[index,]
W.gradient.i
W.gradient = w.gradient + t(w.gradient.i)
W.gradient.i
w.gradient
W.gradient = w.gradient + t(w.gradient.i)
t(w.gradient.i)
w.gradient.i
W.gradient.i=0.5*t(Xi.train.a%*%diag(sigmoid_return(v.vec)))%*%(yi.hat-y.train[index])%*%X.scaled.train[index,]
t(W.gradient.i)
library(NeuralNetwork1)
NNetIterations(X.mat,y.vec,20L,0.5,15L,is.train)
library(NeuralNetwork1)
NNetIterations(X.mat,y.vec,20L,0.5,15L,is.train)
NNetIterations(X.mat,y.vec = ,20L,0.5,15L,is.train)
y.vec
length(y.vec)
dim(X.mat)
NNetIterations(X.mat,y.vec ,20L,0.5,15L,is.train)
NNetIterations(X.mat,y.vec ,20L,0.5,15L,is.train)
X.mat
dim(X>mat)
y.vec
NNetIterations(X.mat,y.vec,20L,0.5,15L,is.train)
NNetIterations(X.mat , y.vec,20L,0.5,15L,is.train)
NNetIterations(X.mat , akns,20L,0.5,15L,is.train)
NNetIterations(X.mat ,y ,20L,0.5,15L,is.train)
NNetIterations(X.mat ,y.vec ,20L,0.5,15L,is.train)
y.vec
data(ozone, package = "ElemStatLearn")
y.vec <- ozone[, 1]
X.mat <- as.matrix(ozone[,-1])
y.vec
NNetIterations <- function(X.mat,y.vec,20L,.5,15L,is.train)
NNetIterations <- function(X.mat,y.vec,20L,0.5,15L,is.train)
y.vec
X.mat
y.vec
NNetIterations(X.mat,y.vec)
NNetIterations(X.mat,y.vec,1L,1L,1L,is.train)
NNetIterations(X.mat,y.vec,1L,0.5,1L,is.train)
NNetIterations(X.mat,y.vec,20L,0.5,15L,is.train)
n.observations <- nrow(X.mat)
n.features <- ncol(X.mat)
X.mat.min = colMeans(X.mat)
X.temp=t(t(X.mat)-X.mat.min)
X.mat.sd=sqrt(colSums((X.temp)^2)/dim(X.mat)[1])
X.scaled.mat=t(t(X.temp)/X.mat.sd)
train.index = which(is.train==TRUE)
validation.index = which(is.train!=TRUE)
X.scaled.train = X.scaled.mat[train.index,]
y.train = y.vec[train.index]
X.scaled.validation = X.scaled.mat[validation.index,]
y.validation = y.vec[validation.index]
pred.mat = matrix(0,n.observations, max.iterations)
W.mat = matrix(rnorm(n.features*n.hidden.units),n.features,n.hidden.units)
v.vec = rnorm(n.hidden.units)
v.gradient=rep(0,n.hidden.units)
W.gradient=matrix(0,n.features,n.hidden.units)
intercept.vec = rep(0,n.obeservations)
sigmoid = function(x){
return(1/(1+exp(-x)))
}
sigmoid_return=function(x){
return(exp(-x)/(1+exp(-x))^2)
sigmoid = function(x){
return(1/(1+exp(-x)))
}
sigmoid_return=function(x){
return(exp(-x)/(1+exp(-x))^2)
}
index=1
for (index in 1:dim(X.scaled.train)[1]){
v.vec = as.vector(v.vec)
Xi.train.vec=X.scaled.train[index,]
Xi.train.a=Xi.train.vec%*%W.mat
Xi.train.z=sigmoid(Xi.train.a)
Xi.train.b=Xi.train.z%*%v.vec
# if (is.binary)
#yi.hat = sigmoid(Xi.train.b) else
yi.hat=Xi.train.b
v.gradient.i=0.5*(yi.hat-y.train[index])%*%Xi.train.z
W.gradient.i=0.5*t(Xi.train.a%*%diag(sigmoid_return(v.vec)))%*%(yi.hat-y.train[index])%*%X.scaled.train[index,]
v.gradient = v.gradient + v.gradient.i
W.gradient = W.gradient + t(W.gradient.i)
}
library(NeuralNetwork1)
NNetIterations(X.mat,y.vec,20L,0.5,15L,is.train)
warnings()
library(NeuralNetwork1)
NNetIterations(X.mat,y.vec,20L,0.5,15L,is.train)
pred.mat=NNetIterations(X.mat,y.vec,20L,0.5,15L,is.train)
View(pred.mat)
dim(pred.mat)
pred.mat
pred.mat[1]
dim(pred.mat[1])
dim(as.array(pred.mat[1])
dim(as.array(pred.mat[1])
dim(as.array(pred.mat[1]))
as.array(pred.mat[1])
dim(as.array(pred.mat[1]))
View(pred.mat)
library(NeuralNetwork1)
pred.mat=NNetIterations(X.mat,y.vec,20L,0.5,15L,is.train)
pred.mat
dim(pred.mat)
View(pred.mat)
y.vec
pred.mat=NNetIterations(X.mat,y.vec,200L,0.5,15L,is.train)
y.vec

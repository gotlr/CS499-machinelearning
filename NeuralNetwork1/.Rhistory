library(NeuralNetwork1)
hello
hello()
hello()
library(NeuralNetwork1)
hello()
library(NeuralNetwork1)
hello()
hello()
library(NeuralNetwork1)
library(NeuralNetwork1)
NNetIterations(1,2,3,4,5)
a=matrix(data=2,nrow=2,ncol=2)
NNetIterations(a,2,3,4,5)
library(NeuralNetwork1)
a=c(1,2)
a=matrix(data=2,nrow=2,ncol=2)
b=c(1,2)
NNetIterations(a,b,3,4,5)
NNetIterations(a,c(1,2,3),3,4,5)
!1
!a,b
1||2
1||0
1&&0
1&0
if(a,b)
is.numberic(1)
is.numeric(1)
!all(is.numberic(1))
!all(is.numeric(1))
all(is.numeric(1))
!all(is.numeric(a))
all(is.numeric(a))
is.numric(a)
is.numeric(a)
a
is.numeric("a")
all(is.numeric("a"))
all(a<1)
all(a>1)
!all(a>1)
library(NeuralNetwork1)
NNetIterations(a,b,3,4,5)
NNetIterations(a,b,1,4,5)
NNetIterations(a,b,0,4,5)
max.iterations=3
all(max.iterations>1,is.integer(max.iterations))
max.iterations>1
is.integer(max.iterations)
1l
1L
NNetIterations(a,b,3L,4,5)
is.boolean
getclass(a)
getClass(a)
?is()
library(NeuralNetwork1)
NNetIterations((a,b,3L,3L,c(TRUe,FALSE)))
NNetIterations((a,b,3L,3L,c(TRUe,FALSE))
NNetIterations(a,b,3L,3L,c(TRUe,FALSE))
NNetIterations(a,b,3L,3L,c(TRUE,FALSE))
3L
NNetIterations(a,b,3L,3,c(TRUE,FALSE))
NNetIterations(a,b,3,3L,c(TRUE,FALSE))
NNetIterations(a,b,3L,3L,c(TRUE,FALSE))
n.hidden.units=3L
n.hidden.units>=1
is.integer(n.hidden.units)
!all(n.hidden.units>=1,is.integer(n.hidden.units))
library(NeuralNetwork1)
NNetIterations(a,b,3L,3L,c(TRUE,FALSE))
NNetIterations(a,b,3L,n.hidden.units,c(TRUE,FALSE))
n.hidden.units
if()
if(1)
if(1){c=1}
c
if(-1){c=1}
c
if(-1){c=2}
c
if(0){c=3}
c
library(NeuralNetwork1)
NNetIterations(a,b,3L,n.hidden.units,c(TRUE,FALSE))
library(NeuralNetwork1)
NNetIterations(a,b,3L,n.hidden.units,c(TRUE,FALSE))
c(TRUE,FALSE)
0<1<2
library(NeuralNetwork1)
NNetIterations(a,b,3L,0.5,3L,c(TRUE,FALSE))
library(NeuralNetwork1)
NNetIterations(a,b,3L,0.5,3L,c(TRUE,FALSE))
which(a==1)
which(a==2)
data(SAheart, package = "ElemStatLearn")
library(ggplot2)
data(SAheart, package = "ElemStatLearn")
install.packages("ElemStatLearn"")
install.packages("ElemStatLearn)
install.packages("ElemStatLearn")
install.packages(ElemStatLearn)
install.packages("ElemStatLearn)
install.packages("ElemStatLearn")
data(SAheart, package = "ElemStatLearn")
X.mat <- data.matrix(subset(SAheart, select = -c(chd)))
length(X>mat)
length(X.mat)
X.mat[-1]
length(X.mat[-1])
length(X.mat[1,2,3,4])
X.mat[1,2,3,4]
X.mat[1]
X.mat[1,]
X.mat[c(1,4),]
X.mat[c(1,2,3,4),]
X.mat=X>mat[c(1,2,3,4),]
X.mat=X.mat[c(1,2,3,4),]
y.vec=y.vec[c[1,2,3,4],]
y.vec <- as.vector(data.matrix(subset(SAheart, select = chd)))
y.vec
y.vec=y.vec[c[1,2,3,4],]
y.vec=y.vec[c(1,2,3,4),]
y.vec=c(1,1,0,1)
y.vec
step.size=0.5
n.hidden.units=3L
max.iterations=3L
is.logical=c(TRUE,TRUE,FLASE,FLASE)
is.logical=c(TRUE,TRUE,FALSE,FALSE)
NNetIterations(X.mat,y.vec,max.iterations,step.size,n.hidden.units,is.train)
is.train=c(TRUE,TRUE,FALSE,FALSE)
NNetIterations(X.mat,y.vec,max.iterations,step.size,n.hidden.units,is.train)
train.index= which(is.train==TRUE)
train.index
validation.index=which(is.train!=TRUE)
X.mat(c(train.index),)
X.mat(train.index,)
X.mat[train.index,]
?scale()
scale(X.mat,center = TRUE,scale = TRUE)
X>mat
X.mat
length(scale(X.mat,center = TRUE,scale = TRUE))
View(length(scale(X.mat,center = TRUE,scale = TRUE)))
View(scale(X.mat,center = TRUE,scale = TRUE))
length(X.mat)
X.scale.mat=scale(X.mat,center = TRUE,scale = TRUE)
#find(split) the train set and validation set
train.index= which(is.train==TRUE)
validation.index=which(is.train!=TRUE)
train.mat=X.mat[train.index,]
validation.mat=X.mat[validation.index,]
validation.mat
#compute a scaled input matrix, which has mean=0 and sd=1 for each column
X.scale.mat=scale(X.mat,center = TRUE,scale = TRUE)
#find(split) the train set and validation set
train.index= which(is.train==TRUE)
validation.index=which(is.train!=TRUE)
train.mat=X.scale[train.index,]
validation.mat=X.scale[validation.index,]
X.scale.mat=scale(X.mat,center = TRUE,scale = TRUE)
#find(split) the train set and validation set
train.index= which(is.train==TRUE)
validation.index=which(is.train!=TRUE)
train.mat=X.scale.mat[train.index,]
validation.mat=X.scale.mat[validation.index,]
validation.mat
y.vec
y.vec(1)
y.vec[1]
y.vec[c(1,2)]
X.scale.mat=scale(X.mat,center = TRUE,scale = TRUE)
#find(split) the train set and validation set
train.index= which(is.train==TRUE)
validation.index=which(is.train!=TRUE)
train.mat=X.scale.mat[train.index,]
train.output=y.vec[train.index,]
validation.mat=X.scale.mat[validation.index,]
validation.output=y.vec[validation.index,]
train.index
y.vec[c(1,2)]
y.vec[train.index]
#compute a scaled input matrix, which has mean=0 and sd=1 for each column
X.scale.mat=scale(X.mat,center = TRUE,scale = TRUE)
#find(split) the train set and validation set
train.index= which(is.train==TRUE)
validation.index=which(is.train!=TRUE)
train.mat=X.scale.mat[train.index]
train.output=y.vec[train.index,]
validation.mat=X.scale.mat[validation.index,]
validation.output=y.vec[validation.index]
#compute a scaled input matrix, which has mean=0 and sd=1 for each column
X.scale.mat=scale(X.mat,center = TRUE,scale = TRUE)
#find(split) the train set and validation set
train.index= which(is.train==TRUE)
validation.index=which(is.train!=TRUE)
train.mat=X.scale.mat[train.index,]
train.output=y.vec[train.index]
validation.mat=X.scale.mat[validation.index,]
validation.output=y.vec[validation.index]
validation.output
a
?size
size(a)
dim(a)
dim(a)[1]
dim(a)[2]
a
1/a
X.mat.min = colMeans(X.mat)
X.mat.sd = colsum((X.mat-X.mat.min)^2)/dim(a)[2]
X.mat.sd = colSum((X.mat-X.mat.min)^2)/dim(a)[2]
X.mat.sd = colSums((X.mat-X.mat.min)^2)/dim(a)[2]
X.scale.mat=t((t(X.mat-X.mat.min)*(1/X.mat.sd)))
X.scale.mat
X.mat.min = colMeans(X.mat)
X.mat.sd = sqrt(colSums((X.mat-X.mat.min)^2)/dim(a)[2])
X.scale.mat=t((t(X.mat-X.mat.min)*(1/X.mat.sd)))
X.scale.mat
scale(X.mat,center = TRUE,scale = TRUE)
colMeans(X.scale.mat)
colMeans(scale(X.mat,center = TRUE,scale = TRUE))
X.mat.sd
X.mat.sd = sqrt(colSums((X.mat-X.mat.min)^2)/dim(a)[2])
X.mat.sd
1/X.mat.sd
a=matrix[c(2,3,4,5),nrow=2,ncol=2]
a=matrix[data=c(2,3,4,5),nrow=2,ncol=2]
a=matrix[0,nrow=2,ncol=2]
a=matrix(data=c(2,3,4,5),nrow=2,ncol=2)
a
X.mat.min = colMeans(X.mat)
colMeans(X.mat)
colMeans(a)
X.mat-X.mat.min
a-colMeans(a)
a-t(colMeans(a))
t(t(a)-colMeans(a))
X.mat.min = colMeans(X.mat)
X.mat.sd = sqrt(colSums(t(t(X.mat)-X.mat.min)^2)/dim(a)[2])
X.scale.mat=t((t(X.mat-X.mat.min)*(1/X.mat.sd)))
colMeans(X.scale.mat)
t(t(a)-colMeans(a))
(t(a)-colMeans(a))*t(t(a)-colMeans(a))
t(t(a)-colMeans(a))
(t(a)-colMeans(a))
(t(a)-colMeans(a))*t(t(a)-colMeans(a))
(t(a)-colMeans(a))%*%t(t(a)-colMeans(a))
X.mat.min = colMeans(X.mat)
X.mat.sd=sqrt(colSums((t(X.mat)-X.mat.min)%*%t(t(X.mat)-X.mat.min))/dim(a)[2])
X.scale.mat=t((t(X.mat-X.mat.min)%*%(1/X.mat.sd)))
(t(X.mat)-X.mat.min)%*%t(t(X.mat)-X.mat.min)
colSums((t(X.mat)-X.mat.min)%*%t(t(X.mat)-X.mat.min))
X.mat.min = colMeans(X.mat)
X.mat.sd=sqrt(colSums((t(X.mat)-X.mat.min)%*%t(t(X.mat)-X.mat.min))/dim(X.mat)[2])
X.scale.mat=t((t(X.mat-X.mat.min)%*%(1/X.mat.sd)))
X.mat.min = colMeans(X.mat)
X.mat.sd=sqrt(colSums((t(X.mat)-X.mat.min)%*%t(t(X.mat)-X.mat.min))/dim(X.mat)[2])
colSums((t(X.mat)-X.mat.min)%*%t(t(X.mat)-X.mat.min))/dim(X.mat)[2]
sqrt(colSums((t(X.mat)-X.mat.min)%*%t(t(X.mat)-X.mat.min))/dim(X.mat)[2])
X.mat
t(t(X.mat)-X.mat.min)
(t(X.mat)-X.mat.min)%*%t(t(X.mat)-X.mat.min)
colSums((t(X.mat)-X.mat.min)%*%t(t(X.mat)-X.mat.min))
dim(X.mat)[2]
X.mat
dim(X.mat)
colSums((t(X.mat)-X.mat.min)%*%t(t(X.mat)-X.mat.min))/dim(X.mat)[1]
sqrt(colSums((t(X.mat)-X.mat.min)%*%t(t(X.mat)-X.mat.min))/dim(X.mat)[1])
colSums((t(X.mat)-X.mat.min)%*%t(t(X.mat)-X.mat.min))/dim(X.mat)[1]
a
sqrt(a)
t(X.mat)-X.mat.min
(t(X.mat)-X.mat.min)%*%t(t(X.mat)-X.mat.min)
t(t(X.mat)-X.mat.min)
View((t(X.mat)-X.mat.min)%*%t(t(X.mat)-X.mat.min)))
View((t(X.mat)-X.mat.min)%*%t(t(X.mat)-X.mat.min))
temp=t(t(X.mat)-X.mat.min)
temp
t(temp)%*%temp
View(ans)
View(t(temp)%*%temp)
a
t(a)
temp
t(temp)
a
a^2
X.mat.min = colMeans(X.mat)
X.mat.sd=sqrt(colSums((t(t(X.mat)-X.mat.min))^2)/dim(X.mat)[1])
X.scale.mat=t((t(X.mat-X.mat.min)%*%(1/X.mat.sd)))
X.mat.sd=sqrt(colSums((t(t(X.mat)-X.mat.min))^2)/dim(X.mat)[1])
X.mat.sd
a
b
a/b
t(a)/b
X.mat.min = colMeans(X.mat)
X.mat.sd=sqrt(colSums((t(t(X.mat)-X.mat.min))^2)/dim(X.mat)[1])
X.scale.mat=t((t(X.mat-X.mat.min)/(1/X.mat.sd)))
X.scale.mat
X.mat.min = colMeans(X.mat)
X.mat.sd=sqrt(colSums((t(t(X.mat)-X.mat.min))^2)/dim(X.mat)[1])
X.scale.mat=t((t(X.mat-X.mat.min)*(1/X.mat.sd)))
X.scale.mat
X.mat.min = colMeans(X.mat)
X.temp=t(t(X.mat)-X.mat.min)
X.mat.sd=sqrt(colSums((x.temp)^2)/dim(X.mat)[1])
X.mat.min = colMeans(X.mat)
X.temp=t(t(X.mat)-X.mat.min)
X.mat.sd=sqrt(colSums((X.temp)^2)/dim(X.mat)[1])
X.mat.sd
t(X.temp)
X.mat.sd
t(X.temp)/X.mat.sd
X.mat.min = colMeans(X.mat)
X.temp=t(t(X.mat)-X.mat.min)
X.mat.sd=sqrt(colSums((X.temp)^2)/dim(X.mat)[1])
X.scale.mat=t(t(X.temp)/X.mat.sd)
X.scale.mat
colMeans(X.scale.mat)
runif(2,0,2)
matrix(rnorm(4),2,2)

# }else{
##if regression
pred.mat[train.index,iteration] = cbind(1,sigmoid(cbind(1,X.scaled.train)%*%v.mat))%*%w.vec
pred.mat[validation.index,iteration] = cbind(1,sigmoid(cbind(1,X.scaled.validation)%*%v.mat))%*%w.vec
pred.mat[,iteration] = cbind(1,sigmoid(cbind(1,X.scaled.mat)%*%v.mat))%*%w.vec
delta.w = X.b.vec - y.train
delta.v = diag(as.vector(delta.w)) %*% desigmoid(X.a.mat)
#
# }
w.gradient = (t(cbind(1,X.z.mat)) %*% delta.w)/n.observations
v.gradient = (t(cbind(1,X.scaled.train)) %*% delta.v)/ n.observations
w.vec = w.vec - step.size*as.vector(w.gradient)
v.mat = v.mat - step.size*v.gradient
}
w.vec
pred.mat
length(delta.w)
dim(cbind(1,X.z.mat))
delta.w%*%cbind(1,X.z.mat)
w.gradient
pred.mat = matrix(0,n.observations, max.iterations)
v.mat = matrix(runif((n.features+1)*n.hidden.units),n.features+1,n.hidden.units)
w.vec = runif(n.hidden.units+1)
v.gradient=rep(0,n.hidden.units+1)
w.gradient=matrix(0,n.features+1,n.hidden.units)
iteration=1
X.a.mat = cbind(1,X.scaled.train)%*%v.mat
X.z.mat = sigmoid(X.a.mat)
#X.b.vec = X.z.mat %*% v.vec + interception.vec
X.b.vec = cbind(1,X.z.mat) %*% w.vec
X.b.vec
delta.w = X.b.vec - y.train
delta.w
X.b.vec
y.train
delta.v = diag(as.vector(delta.w)) %*% desigmoid(X.a.mat)
w.gradient = (t(cbind(1,X.z.mat)%*%delta.w))/n.observations
dim(X.z.mat)
length(delta.w)
delta.w
dim(w.gradient)
dim(delta.w)
delta.w = X.b.vec - y.train
delta.v = diag(as.vector(delta.w)) %*% desigmoid(X.a.mat)
dim(delta.w)
dim(X.z.mat)
w.gradient = (t(cbind(1,X.z.mat))%*%delta.w)/n.observations
v.gradient = (t(cbind(1,X.scaled.train)) %*% delta.v)/ n.observations
dim(w.gradient)
dim(X.a.mat)
dim(w.vec)
a=matrix(1,3,5)
b=c(1,1,1)
a%*%c
w.vec = runif(n.hidden.units+1)
dim(w.vec)
X.a.mat = cbind(1,X.scaled.train)%*%v.mat
dim(X.a.mat)
X.z.mat = sigmoid(X.a.mat)
dim(cbind(1,X.z.mat))
X.b.vec = cbind(1,X.z.mat) %*% w.vec
dim(X.b.vec)
w.vec
t(w.vec)
dim(t(w.vec))
t(t(w.vec))
cbind(1,X.z.mat) %*% t(t(w.vec))
View(X.b.vec)
Va
a
b
b=c(1,1,1,1,1)
a%*%c
a%*%b
delta.w = X.b.vec - y.train
dim(delta.w)
diag(delta.w)
diag(as.vector(delta.w))
dim(diag(as.vector(delta.w)))
delta.v = diag(as.vector(delta.w)) %*% desigmoid(X.a.mat)
dim(delta.v)
delta.v
n.observations
(t(cbind(1,X.z.mat))%*%delta.w)/n.observations
(t(cbind(1,X.z.mat))%*%delta.w)
desigmoid=function(x){
return(sigmoid(x)/(1-sigmoid(x)))
}
delta.v = diag(as.vector(delta.w)) %*% desigmoid(X.a.mat)
t(cbind(1,X.z.mat))%*%delta.w
v.gradient = (t(cbind(1,X.scaled.train)) %*% delta.v)/ n.observations
v.gradient
X.z.mat
delta.w
X.z.mat
w.vec
w.gradient
v.gradient
step.size*v.gradient
w.vec = w.vec - step.size*as.vector(w.gradient)
v.mat = v.mat - step.size*v.gradient
w.vec
X.a.mat = cbind(1,X.scaled.train)%*%v.mat
X.z.mat = sigmoid(X.a.mat)
#X.b.vec = X.z.mat %*% v.vec + interception.vec
X.b.vec = cbind(1,X.z.mat) %*% w.vec
delta.w = X.b.vec - y.train
delta.w
pred.mat = matrix(0,n.observations, max.iterations)
v.mat = matrix(runif((n.features+1)*n.hidden.units),n.features+1,n.hidden.units)
w.vec = runif(n.hidden.units+1)
v.gradient=rep(0,n.hidden.units+1)
w.gradient=matrix(0,n.features+1,n.hidden.units)
for(iteration in 1:10){
X.a.mat = cbind(1,X.scaled.train)%*%v.mat
X.z.mat = sigmoid(X.a.mat)
#X.b.vec = X.z.mat %*% v.vec + interception.vec
X.b.vec = cbind(1,X.z.mat) %*% w.vec
# if(is.binary){
# ##classification
# pred.mat[,iteration] = sigmoid(cbind(1,sigmoid(cbind(1,X.scaled.mat)%*%v.mat))%*%w.vec)
# y.tilde.train = y.train
# y.tilde.train[which(y.tilde.train==0)] = -1 # change y into non-zero number
# delta.w = -y.train/(1+exp(y.train*X.b.vec))
# delta.v = diag(as.vector(delta.w)) %*% desigmoid(X.a.mat)
# }else{
##if regression
#pred.mat[train.index,iteration] = cbind(1,sigmoid(cbind(1,X.scaled.train)%*%v.mat))%*%w.vec
#pred.mat[validation.index,iteration] = cbind(1,sigmoid(cbind(1,X.scaled.validation)%*%v.mat))%*%w.vec
pred.mat[,iteration] = cbind(1,sigmoid(cbind(1,X.scaled.mat)%*%v.mat))%*%w.vec
delta.w = X.b.vec - y.train
delta.v = diag(as.vector(delta.w)) %*% desigmoid(X.a.mat)
#
# }
w.gradient = (t(cbind(1,X.z.mat))%*%delta.w)/n.observations
v.gradient = (t(cbind(1,X.scaled.train)) %*% delta.v)/ n.observations
w.vec = w.vec - step.size*as.vector(w.gradient)
v.mat = v.mat - step.size*v.gradient
}
View(pred.mat)
rm(list=ls())
data(SAheart, package = "ElemStatLearn")
y.vec = as.vector(SAheart[,dim(SAheart)[2]])
X.mat = SAheart[,-dim(SAheart)[2]]
is.train = rep(TRUE,length(y.vec))
fold.vec = sample(rep(1:4), length(y.vec),TRUE)
is.train[which(fold.vec == 1)] = FALSE
is.train[which(fold.vec != 1)] = TRUE
max.iterations = 100L
step.size = 0.5
n.hidden.units = 15L
X.mat = data.matrix(X.mat)
X.mat
y.vec
is.train
n.observations <- nrow(X.mat)
n.features <- ncol(X.mat)
if (all(y.vec %in% c(0,1)))
is.binary = 1 else
is.binary = 0
is.binary
train.index = which(is.train==TRUE)
validation.index = which(is.train!=TRUE)
X.train = X.mat[train.index,]
y.train = y.vec[train.index]
X.validation = X.mat[validation.index,]
y.validation = y.vec[validation.index]
X.scaled.train = scale(X.train,center = TRUE,scale = TRUE)
X.scaled.validation = scale(X.validation,center = TRUE,scale = TRUE)
X.scaled.mat = scale(X.mat,center = TRUE,scale = TRUE)
pred.mat = matrix(0,n.observations, max.iterations)
v.mat = matrix(runif((n.features+1)*n.hidden.units),n.features+1,n.hidden.units)
w.vec = runif(n.hidden.units+1)
v.gradient=rep(0,n.hidden.units+1)
w.gradient=matrix(0,n.features+1,n.hidden.units)
sigmoid = function(x){
return(1/(1+exp(-x)))
}
desigmoid=function(x){
return(sigmoid(x)/(1-sigmoid(x)))
}
for(iteration in 1:max.iterations){
X.a.mat = cbind(1,X.scaled.train)%*%v.mat
X.z.mat = sigmoid(X.a.mat)
#X.b.vec = X.z.mat %*% v.vec + interception.vec
X.b.vec = cbind(1,X.z.mat) %*% w.vec
if(is.binary){
# ##classification
#pred.mat[,iteration] = sigmoid(cbind(1,sigmoid(cbind(1,X.scaled.mat)%*%v.mat))%*%w.vec)
y.tilde.train = y.train
y.tilde.train[which(y.tilde.train==0)] = -1 # change y into non-zero number
delta.w = -y.train/(1+exp(y.train*X.b.vec))
delta.v = diag(as.vector(delta.w)) %*% desigmoid(X.a.mat)
}else{
##if regression
#pred.mat[train.index,iteration] = cbind(1,sigmoid(cbind(1,X.scaled.train)%*%v.mat))%*%w.vec
#pred.mat[validation.index,iteration] = cbind(1,sigmoid(cbind(1,X.scaled.validation)%*%v.mat))%*%w.vec
#pred.mat[,iteration] = cbind(1,sigmoid(cbind(1,X.scaled.mat)%*%v.mat))%*%w.vec
delta.w = X.b.vec - y.train
delta.v = diag(as.vector(delta.w)) %*% desigmoid(X.a.mat)
#
# }
w.gradient = (t(cbind(1,X.z.mat))%*%delta.w)/n.observations
v.gradient = (t(cbind(1,X.scaled.train)) %*% delta.v)/ n.observations
w.vec = w.vec - step.size*as.vector(w.gradient)
v.mat = v.mat - step.size*v.gradient
}
for(iteration in 1:max.iterations){
X.a.mat = cbind(1,X.scaled.train)%*%v.mat
X.z.mat = sigmoid(X.a.mat)
#X.b.vec = X.z.mat %*% v.vec + interception.vec
X.b.vec = cbind(1,X.z.mat) %*% w.vec
if(is.binary){
# ##classification
#pred.mat[,iteration] = sigmoid(cbind(1,sigmoid(cbind(1,X.scaled.mat)%*%v.mat))%*%w.vec)
y.tilde.train = y.train
y.tilde.train[which(y.tilde.train==0)] = -1 # change y into non-zero number
delta.w = -y.train/(1+exp(y.train*X.b.vec))
delta.v = diag(as.vector(delta.w)) %*% desigmoid(X.a.mat)
}else{
##if regression
#pred.mat[train.index,iteration] = cbind(1,sigmoid(cbind(1,X.scaled.train)%*%v.mat))%*%w.vec
#pred.mat[validation.index,iteration] = cbind(1,sigmoid(cbind(1,X.scaled.validation)%*%v.mat))%*%w.vec
#pred.mat[,iteration] = cbind(1,sigmoid(cbind(1,X.scaled.mat)%*%v.mat))%*%w.vec
delta.w = X.b.vec - y.train
delta.v = diag(as.vector(delta.w)) %*% desigmoid(X.a.mat)
#
}
w.gradient = (t(cbind(1,X.z.mat))%*%delta.w)/n.observations
v.gradient = (t(cbind(1,X.scaled.train)) %*% delta.v)/ n.observations
w.vec = w.vec - step.size*as.vector(w.gradient)
v.mat = v.mat - step.size*v.gradient
}
w.vec
pred.mat = matrix(0,n.observations, max.iterations)
v.mat = matrix(runif((n.features+1)*n.hidden.units),n.features+1,n.hidden.units)
w.vec = runif(n.hidden.units+1)
v.gradient=rep(0,n.hidden.units+1)
w.gradient=matrix(0,n.features+1,n.hidden.units)
sigmoid = function(x){
return(1/(1+exp(-x)))
}
desigmoid=function(x){
return(sigmoid(x)/(1-sigmoid(x)))
}
pre.mat
pred.mat
w.vec
v.mat
for(iteration in 1:max.iterations){
X.a.mat = cbind(1,X.scaled.train)%*%v.mat
X.z.mat = sigmoid(X.a.mat)
#X.b.vec = X.z.mat %*% v.vec + interception.vec
X.b.vec = cbind(1,X.z.mat) %*% w.vec
if(is.binary){
# ##classification
#pred.mat[,iteration] = sigmoid(cbind(1,sigmoid(cbind(1,X.scaled.mat)%*%v.mat))%*%w.vec)
y.tilde.train = y.train
y.tilde.train[which(y.tilde.train==0)] = -1 # change y into non-zero number
delta.w = -y.train/(1+exp(y.train*X.b.vec))
delta.v = diag(as.vector(delta.w)) %*% desigmoid(X.a.mat)
}else{
##if regression
#pred.mat[train.index,iteration] = cbind(1,sigmoid(cbind(1,X.scaled.train)%*%v.mat))%*%w.vec
#pred.mat[validation.index,iteration] = cbind(1,sigmoid(cbind(1,X.scaled.validation)%*%v.mat))%*%w.vec
#pred.mat[,iteration] = cbind(1,sigmoid(cbind(1,X.scaled.mat)%*%v.mat))%*%w.vec
delta.w = X.b.vec - y.train
delta.v = diag(as.vector(delta.w)) %*% desigmoid(X.a.mat)
#
}
w.gradient = (t(cbind(1,X.z.mat))%*%delta.w)/n.observations
v.gradient = (t(cbind(1,X.scaled.train)) %*% delta.v)/ n.observations
w.vec = w.vec - step.size*as.vector(w.gradient)
v.mat = v.mat - step.size*v.gradient
}
View(pred.mat)
max.iterations=50L
for(iteration in 1:max.iterations){
X.a.mat = cbind(1,X.scaled.train)%*%v.mat
X.z.mat = sigmoid(X.a.mat)
#X.b.vec = X.z.mat %*% v.vec + interception.vec
X.b.vec = cbind(1,X.z.mat) %*% w.vec
if(is.binary){
# ##classification
#pred.mat[,iteration] = sigmoid(cbind(1,sigmoid(cbind(1,X.scaled.mat)%*%v.mat))%*%w.vec)
y.tilde.train = y.train
y.tilde.train[which(y.tilde.train==0)] = -1 # change y into non-zero number
delta.w = -y.train/(1+exp(y.train*X.b.vec))
delta.v = diag(as.vector(delta.w)) %*% desigmoid(X.a.mat)
}else{
##if regression
#pred.mat[train.index,iteration] = cbind(1,sigmoid(cbind(1,X.scaled.train)%*%v.mat))%*%w.vec
#pred.mat[validation.index,iteration] = cbind(1,sigmoid(cbind(1,X.scaled.validation)%*%v.mat))%*%w.vec
#pred.mat[,iteration] = cbind(1,sigmoid(cbind(1,X.scaled.mat)%*%v.mat))%*%w.vec
delta.w = X.b.vec - y.train
delta.v = diag(as.vector(delta.w)) %*% desigmoid(X.a.mat)
#
}
w.gradient = (t(cbind(1,X.z.mat))%*%delta.w)/n.observations
v.gradient = (t(cbind(1,X.scaled.train)) %*% delta.v)/ n.observations
w.vec = w.vec - step.size*as.vector(w.gradient)
v.mat = v.mat - step.size*v.gradient
}
v.mat
w.vec
pred.mat
View(pred.mat)
X.scaled.train
View(X.scaled.train)
colMeans(X.scaled.train)
sqrt((colMeans(X.scaled.train)-X.scaled.train)^2/n.observation)
sqrt((colMeans(X.scaled.train)-X.scaled.train)^2/n.observations)
View(X.mat)
X.train
fold.vec = sample(rep(1:2), length(y.vec),TRUE)
is.train[which(fold.vec == 1)] = FALSE
is.train[which(fold.vec != 1)] = TRUE
train.index = which(is.train==TRUE)
validation.index = which(is.train!=TRUE)
X.train = X.mat[train.index,]
y.train = y.vec[train.index]
X.validation = X.mat[validation.index,]
y.validation = y.vec[validation.index]
X.scaled.train = scale(X.train,center = TRUE,scale = TRUE)
X.scaled.validation = scale(X.validation,center = TRUE,scale = TRUE)
X.scaled.mat = scale(X.mat,center = TRUE,scale = TRUE)
pred.mat = matrix(0,n.observations, max.iterations)
v.mat = matrix(runif((n.features+1)*n.hidden.units),n.features+1,n.hidden.units)
w.vec = runif(n.hidden.units+1)
v.gradient=rep(0,n.hidden.units+1)
w.gradient=matrix(0,n.features+1,n.hidden.units)
sigmoid = function(x){
return(1/(1+exp(-x)))
}
desigmoid=function(x){
return(sigmoid(x)/(1-sigmoid(x)))
}
for(iteration in 1:max.iterations){
X.a.mat = cbind(1,X.scaled.train)%*%v.mat
X.z.mat = sigmoid(X.a.mat)
#X.b.vec = X.z.mat %*% v.vec + interception.vec
X.b.vec = cbind(1,X.z.mat) %*% w.vec
if(is.binary){
##binary classification
#pred.mat[,iteration] = sigmoid(cbind(1,sigmoid(cbind(1,X.scaled.mat)%*%v.mat))%*%w.vec)
y.tilde.train = y.train
y.tilde.train[which(y.tilde.train==0)] = -1 # change y into non-zero number
delta.w = -y.train/(1+exp(y.train*X.b.vec))
delta.v = diag(as.vector(delta.w)) %*% desigmoid(X.a.mat)
}else{
##if regression
#pred.mat[train.index,iteration] = cbind(1,sigmoid(cbind(1,X.scaled.train)%*%v.mat))%*%w.vec
#pred.mat[validation.index,iteration] = cbind(1,sigmoid(cbind(1,X.scaled.validation)%*%v.mat))%*%w.vec
#pred.mat[,iteration] = cbind(1,sigmoid(cbind(1,X.scaled.mat)%*%v.mat))%*%w.vec
delta.w = X.b.vec - y.train
delta.v = diag(as.vector(delta.w)) %*% desigmoid(X.a.mat)
#
}
w.gradient = (t(cbind(1,X.z.mat))%*%delta.w)/n.observations
v.gradient = (t(cbind(1,X.scaled.train)) %*% delta.v)/ n.observations
w.vec = w.vec - step.size*as.vector(w.gradient)
v.mat = v.mat - step.size*v.gradient
}
rm(list=ls())
data(SAheart, package = "ElemStatLearn")
y.vec = as.vector(SAheart[,dim(SAheart)[2]])
X.mat = SAheart[,-dim(SAheart)[2]]
is.train = rep(TRUE,length(y.vec))
fold.vec = sample(rep(1:2), length(y.vec),TRUE)
is.train[which(fold.vec == 1)] = FALSE
is.train[which(fold.vec != 1)] = TRUE
max.iterations = 100L
step.size = 0.5
n.hidden.units = 15L
X.mat = data.matrix(X.mat)
if (all(y.vec %in% c(0,1)))
is.binary = 1 else
is.binary = 0
n.observations <- nrow(X.mat)
n.features <- ncol(X.mat)
#find(split) the train set and validation set
train.index = which(is.train==TRUE)
validation.index = which(is.train!=TRUE)
X.train = X.mat[train.index,]
y.train = y.vec[train.index]
X.validation = X.mat[validation.index,]
y.validation = y.vec[validation.index]
#compute a scaled input matrix, which has mean=0 and sd=1 for each column
X.scaled.train = scale(X.train,center = TRUE,scale = TRUE)
X.scaled.validation = scale(X.validation,center = TRUE,scale = TRUE)
X.scaled.mat = scale(X.mat,center = TRUE,scale = TRUE)
pred.mat = matrix(0,n.observations, max.iterations)
v.mat = matrix(runif((n.features+1)*n.hidden.units),n.features+1,n.hidden.units)
w.vec = runif(n.hidden.units+1)
v.gradient=rep(0,n.hidden.units+1)
w.gradient=matrix(0,n.features+1,n.hidden.units)
sigmoid = function(x){
return(1/(1+exp(-x)))
}
desigmoid=function(x){
return(sigmoid(x)/(1-sigmoid(x)))
}
for(iteration in 1:max.iterations){
X.a.mat = cbind(1,X.scaled.train)%*%v.mat
X.z.mat = sigmoid(X.a.mat)
#X.b.vec = X.z.mat %*% v.vec + interception.vec
X.b.vec = cbind(1,X.z.mat) %*% w.vec
if(is.binary){
##binary classification
#pred.mat[,iteration] = sigmoid(cbind(1,sigmoid(cbind(1,X.scaled.mat)%*%v.mat))%*%w.vec)
y.tilde.train = y.train
y.tilde.train[which(y.tilde.train==0)] = -1 # change y into non-zero number
delta.w = -y.train/(1+exp(y.train*X.b.vec))
delta.v = diag(as.vector(delta.w)) %*% desigmoid(X.a.mat)
}else{
##if regression
#pred.mat[train.index,iteration] = cbind(1,sigmoid(cbind(1,X.scaled.train)%*%v.mat))%*%w.vec
#pred.mat[validation.index,iteration] = cbind(1,sigmoid(cbind(1,X.scaled.validation)%*%v.mat))%*%w.vec
#pred.mat[,iteration] = cbind(1,sigmoid(cbind(1,X.scaled.mat)%*%v.mat))%*%w.vec
delta.w = X.b.vec - y.train
delta.v = diag(as.vector(delta.w)) %*% desigmoid(X.a.mat)
#
}
w.gradient = (t(cbind(1,X.z.mat))%*%delta.w)/n.observations
v.gradient = (t(cbind(1,X.scaled.train)) %*% delta.v)/ n.observations
w.vec = w.vec - step.size*as.vector(w.gradient)
v.mat = v.mat - step.size*v.gradient
}
v.mat
pred.mat = matrix(0,n.observations, max.iterations)
v.mat = matrix(runif((n.features+1)*n.hidden.units),n.features+1,n.hidden.units)
w.vec = runif(n.hidden.units+1)
v.gradient=rep(0,n.hidden.units+1)
w.gradient=matrix(0,n.features+1,n.hidden.units)
X.a.mat = (cbind(1,X.scaled.train))%*%v.mat
X.a.mat
X.z.mat = sigmoid(X.a.mat)
X.b.vec = (cbind(1,X.z.mat)) %*% w.vec
X.b.vec
pred.mat[,1] = sigmoid(cbind(1,sigmoid(cbind(1,X.scaled.mat)%*%v.mat))%*%w.vec)
y.tilde.train = y.train
y.tilde.train[which(y.tilde.train==0)] = -1 # change y into non-zero number
delta.w = -y.train/(1+exp(y.train*X.b.vec))
delta.v = diag(as.vector(delta.w)) %*% desigmoid(X.a.mat)
w.gradient = (t(cbind(1,X.z.mat))%*%delta.w)/n.observations
v.gradient = (t(cbind(1,X.scaled.train)) %*% delta.v)/ n.observations
w.vec = w.vec - step.size*as.vector(w.gradient)
v.mat = v.mat - step.size*v.gradient
w.vec
v.mat
iteration=2
X.a.mat = (cbind(1,X.scaled.train))%*%v.mat
X.z.mat = sigmoid(X.a.mat)
#X.b.vec = X.z.mat %*% v.vec + interception.vec
X.b.vec = (cbind(1,X.z.mat)) %*% w.vec
if(is.binary){
##binary classification
pred.mat[,iteration] = sigmoid(cbind(1,sigmoid(cbind(1,X.scaled.mat)%*%v.mat))%*%w.vec)
y.tilde.train = y.train
y.tilde.train[which(y.tilde.train==0)] = -1 # change y into non-zero number
delta.w = -y.train/(1+exp(y.train*X.b.vec))
delta.v = diag(as.vector(delta.w)) %*% desigmoid(X.a.mat)
}else{
##if regression
#pred.mat[train.index,iteration] = cbind(1,sigmoid(cbind(1,X.scaled.train)%*%v.mat))%*%w.vec
#pred.mat[validation.index,iteration] = cbind(1,sigmoid(cbind(1,X.scaled.validation)%*%v.mat))%*%w.vec
#pred.mat[,iteration] = cbind(1,sigmoid(cbind(1,X.scaled.mat)%*%v.mat))%*%w.vec
delta.w = X.b.vec - y.train
delta.v = diag(as.vector(delta.w)) %*% desigmoid(X.a.mat)
#
}
w.gradient = (t(cbind(1,X.z.mat))%*%delta.w)/n.observations
v.gradient = (t(cbind(1,X.scaled.train)) %*% delta.v)/ n.observations
w.vec = w.vec - step.size*as.vector(w.gradient)
v.mat = v.mat - step.size*v.gradient
v.mat
pred.mat = matrix(0,n.observations, max.iterations)
v.mat = matrix(runif((n.features+1)*n.hidden.units),n.features+1,n.hidden.units)
w.vec = runif(n.hidden.units+1)
v.gradient=rep(0,n.hidden.units+1)
w.gradient=matrix(0,n.features+1,n.hidden.units)
is.binary
for(iteration in 1:max.iterations){
X.a.mat = (cbind(1,X.scaled.train))%*%v.mat
X.z.mat = sigmoid(X.a.mat)
#X.b.vec = X.z.mat %*% v.vec + interception.vec
X.b.vec = (cbind(1,X.z.mat)) %*% w.vec
if(is.binary){
##binary classification
pred.mat[,iteration] = sigmoid(cbind(1,sigmoid(cbind(1,X.scaled.mat)%*%v.mat))%*%w.vec)
y.tilde.train = y.train
y.tilde.train[which(y.tilde.train==0)] = -1 # change y into non-zero number
delta.w = -y.train/(1+exp(y.train*X.b.vec))
delta.v = diag(as.vector(delta.w)) %*% desigmoid(X.a.mat)
}else{
##if regression
#pred.mat[train.index,iteration] = cbind(1,sigmoid(cbind(1,X.scaled.train)%*%v.mat))%*%w.vec
#pred.mat[validation.index,iteration] = cbind(1,sigmoid(cbind(1,X.scaled.validation)%*%v.mat))%*%w.vec
#pred.mat[,iteration] = cbind(1,sigmoid(cbind(1,X.scaled.mat)%*%v.mat))%*%w.vec
delta.w = X.b.vec - y.train
delta.v = diag(as.vector(delta.w)) %*% desigmoid(X.a.mat)
#
}
w.gradient = (t(cbind(1,X.z.mat))%*%delta.w)/n.observations
v.gradient = (t(cbind(1,X.scaled.train)) %*% delta.v)/ n.observations
w.vec = w.vec - step.size*as.vector(w.gradient)
v.mat = v.mat - step.size*v.gradient
}
View(pred.mat)
step.size
max.iterations
is.train
